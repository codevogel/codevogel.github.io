import{s as Cl,e as a,a as s,H as vt,c as n,l as c,g as i,p as yt,m as r,o as hl,i as l,n as de,f as o}from"./scheduler.D4vXfk3B.js";import{S as vl,i as yl}from"./index.DBFCcoIS.js";function ml(nl){let p,ue='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#godot-doctor-️">Godot Doctor 👨🏻‍⚕️🩺</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#quickstart-">Quickstart 🚀</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#table-of-contents">Table of Contents</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#what-is-godot-doctor">What is Godot Doctor?</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#why-use-godot-doctor">Why Use Godot Doctor?</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#️-no-tool-required">🏷️ No @tool Required</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#-automatic-scene-validation">🔄 Automatic Scene Validation</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#️validate-nodes-and-resources">⚙️Validate Nodes AND Resources</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#-test-driven-validation">🧪 Test-Driven Validation</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#-declarative-syntax">🎯 Declarative Syntax</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#syntax">Syntax</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#validationcondition">ValidationCondition</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#simple-helper-method">Simple Helper Method</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#reuse-validation-logic-with-callables">Reuse validation logic with Callables</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#abstract-away-complex-logic">Abstract Away Complex Logic</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#nested-validation-conditions">Nested Validation Conditions</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#how-it-works">How It Works</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#examples">Examples</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#installation">Installation</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#license">License</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#attribution">Attribution</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#contributing-bug-reports--feature-requests">Contributing, Bug Reports &amp; Feature Requests</a></li></ol></li></ol>',mt,d,Ce="Godot Doctor 👨🏻‍⚕️🩺",ft,M,he="A powerful scene validation plugin for Godot that provides a cleaner, more maintainable alternative to <code>_get_configuration_warnings()</code>, that doesn’t require gameplay scripts to be <code>@tool</code>.",xt,G,ve,Dt,u,ye="Quickstart 🚀",_t,V,me="<li>Copy the <code>addons/godot_doctor</code> folder to your project’s <code>addons/</code> directory</li> <li>Enable the plugin in Project Settings &gt; Plugins</li>",At,C,fe="Table of Contents",bt,q,xe='<li><a href="#what-is-godot-doctor">What is Godot Doctor?</a></li> <li><a href="#why-use-godot-doctor">Why Use Godot Doctor?</a> <ul><li><a href="#-no-tool-required">🏷️ No <code>@tool</code> Required</a></li> <li><a href="#-automatic-scene-validation">🔄 Automatic Scene Validation</a></li> <li><a href="#%EF%B8%8F-validate-nodes-and-resources">⚙️ Validate Nodes AND Resources</a></li> <li><a href="#-test-driven-validation">🧪 Test-Driven Validation</a></li> <li><a href="#-declarative-syntax">🎯 Declarative Syntax</a></li></ul></li> <li><a href="#syntax">Syntax</a> <ul><li><a href="#validationcondition">ValidationCondition</a></li> <li><a href="#simple-helper-method">Simple Helper Method</a></li> <li><a href="#reuse-validation-logic-with-callables">Reuse validation logic with Callables</a></li> <li><a href="#abstract-away-complex-logic">Abstract Away Complex Logic</a></li> <li><a href="#nested-validation-conditions">Nested Validation Conditions</a></li></ul></li> <li><a href="#how-it-works">How It Works</a></li> <li><a href="#examples">Examples</a></li> <li><a href="#installation">Installation</a></li> <li><a href="#license">License</a> <ul><li><a href="#attribution">Attribution</a></li></ul></li> <li><a href="#contributing-bug-reports--feature-requests">Contributing, Bug Reports &amp; Feature Requests</a></li>',kt,h,De="What is Godot Doctor?",wt,P,_e="Godot Doctor is a Godot plugin that validates your scenes and nodes using a declarative, test-driven approach. Instead of writing procedural warning code, you define validation conditions using callables that focus on validation logic first, with error messages as metadata.",gt,v,Ae="Why Use Godot Doctor?",Ht,y,be="🏷️ <strong>No <code>@tool</code> Required</strong>",Ft,S,ke=`Unlike <a href="https://docs.godotengine.org/en/4.5/classes/class_node.html#class-node-private-method-get-configuration-warnings" rel="nofollow"><code>_get_configuration_warnings()</code></a>, Godot Doctor works without requiring the <a href="https://docs.godotengine.org/en/4.5/tutorials/plugins/running_code_in_the_editor.html#what-is-tool" rel="nofollow"><code>@tool</code></a> annotation on your scripts.
This means that you no longer have to worry about your gameplay code being muddied by editor-specific logic.`,Et,R,we="See the difference for yourself:",Bt,j,ge='<img src="./github-assets/png/before-after.png" alt="Before and After Godot Doctor"/>',Lt,N,He="Our gameplay code stays much more clean and focused!",Tt,m,Fe="🔄 Automatic Scene Validation",Mt,I,Ee=`Validations run automatically when you save scenes, providing immediate feedback during development.
Errors are displayed in a dedicated dock, and you can click on them to navigate directly to the problematic nodes.`,Gt,W,Be='<img src="./github-assets/gif/doctor-example.gif" alt="Godot Doctor Example Gif"/>',Vt,f,Le="⚙️Validate Nodes AND Resources",qt,z,Te=`Godot Doctor can not only validate nodes in your scene, but <code>Resource</code> scripts can define their own validation conditions as well.
Very useful for validating whether your resources have conflicting data (i.e. a value that is higher than the maximum value), or missing references (i.e. an empty string, or a missing texture).`,Pt,x,Me="🧪 Test-Driven Validation",St,U,Ge="Godot Doctor encourages you to write validation logic that resembles unit tests rather than write code that returns strings containing warnings. This encourages:",Rt,O,Ve="<li>Testable validation logic</li> <li>Organized code</li> <li>Better maintainability</li> <li>Human-readable validation conditions</li> <li>Separation of concerns between validation logic and error messages</li>",jt,D,qe="🎯 Declarative Syntax",Nt,Q,Pe="Where <code>_get_configuration_warnings()</code> makes you write code that generates strings, Godot Doctor lets you design your validation logic separately from the error messages, making it easier to read and maintain.",It,_,Se="Syntax",Wt,A,Re="ValidationCondition",zt,J,je="The core of Godot Doctor is the <code>ValidationCondition</code> class, which takes a callable and an error message:",Ut,it,cl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic"># Basic validation condition</span></span>
<span class="line"><span style="color:#91B4D5">var</span><span style="color:#E4F0FB"> condition</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCDC0"> ValidationCondition</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">new</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#91B4D5">    func</span><span style="color:#A6ACCD">(): </span><span style="color:#5DE4C7C0">return</span><span style="color:#E4F0FB"> health</span><span style="color:#91B4D5"> ></span><span style="color:#5DE4C7"> 0</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#5DE4C7">    "Health must be greater than 0"</span></span>
<span class="line"><span style="color:#A6ACCD">)</span></span></code></pre>`,at,b,Ne="Simple Helper Method",Ot,K,Ie="For basic boolean validations, use the convenience <code>simple()</code> method, allowing you to skip the <code>func()</code> wrapper:",Qt,nt,rl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic"># Equivalent to the above, but more concise</span></span>
<span class="line"><span style="color:#91B4D5">var</span><span style="color:#E4F0FB"> condition</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCDC0"> ValidationCondition</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">simple</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#E4F0FB">    health</span><span style="color:#91B4D5"> ></span><span style="color:#5DE4C7"> 0</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#5DE4C7">    "Health must be greater than 0"</span></span>
<span class="line"><span style="color:#A6ACCD">)</span></span></code></pre>`,ct,k,We="Reuse validation logic with Callables",Jt,X,ze="Using <code>Callables</code> allows you to reuse common validation methods:",Kt,rt,pl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">func</span><span style="color:#ADD7FF"> _is_more_than_zero</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">value</span><span style="color:#A6ACCD">: </span><span style="color:#A6ACCDC0">int</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">-></span><span style="color:#A6ACCDC0"> bool</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#5DE4C7C0">	 return</span><span style="color:#E4F0FB"> value</span><span style="color:#91B4D5"> ></span><span style="color:#5DE4C7"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">var</span><span style="color:#E4F0FB"> condition</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCDC0"> ValidationCondition</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">simple</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#E4F0FBD0">	 _is_more_than_zero</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">health</span><span style="color:#A6ACCD">),</span></span>
<span class="line"><span style="color:#5DE4C7">	 "Health must be greater than 0"</span></span>
<span class="line"><span style="color:#A6ACCD">)</span></span></code></pre>`,pt,w,Ue="Abstract Away Complex Logic",Xt,Y,Oe="Or abstract away complex logic into separate methods:",Yt,dt,dl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">var</span><span style="color:#E4F0FB"> condition</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCDC0"> ValidationCondition</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">new</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#E4F0FB">	 complex_validation_logic</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#5DE4C7">	 "Complex validation failed"</span></span>
<span class="line"><span style="color:#A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">func</span><span style="color:#ADD7FF"> complex_validation_logic</span><span style="color:#A6ACCD">() </span><span style="color:#91B4D5">-></span><span style="color:#A6ACCDC0"> bool</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">	# Complex logic here</span></span></code></pre>`,ut,g,Qe="Nested Validation Conditions",Zt,Z,Je="Making use of variatic typing, Validation conditions can return arrays of other validation conditions, allowing you to nest validation logic where needed:",$t,Ct,ul=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#A6ACCDC0">ValidationCondition</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">new</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#91B4D5">			func</span><span style="color:#A6ACCD">() </span><span style="color:#91B4D5">-></span><span style="color:#A6ACCDC0"> Variant</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#5DE4C7C0">				if</span><span style="color:#91B4D5"> not</span><span style="color:#E4F0FBD0"> is_instance_valid</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">my_resource</span><span style="color:#A6ACCD">):</span></span>
<span class="line"><span style="color:#5DE4C7C0">					return</span><span style="color:#5DE4C7"> false</span></span>
<span class="line"><span style="color:#5DE4C7C0">				return</span><span style="color:#E4F0FB"> my_resource</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">get_validation_conditions</span><span style="color:#A6ACCD">(),</span></span>
<span class="line"><span style="color:#5DE4C7">			"my_resource must be assigned."</span></span>
<span class="line"><span style="color:#A6ACCD">		)</span></span></code></pre>`,ht,H,Ke="How It Works",te,$,Xe="<li><strong>Automatic Discovery</strong>: When you save a scene, Godot Doctor scans all nodes for the <code>_get_validation_conditions()</code> method</li> <li><strong>Instance Creation</strong>: For non-<code>@tool</code> scripts, temporary instances are created to run validation logic</li> <li><strong>Condition Evaluation</strong>: Each validation condition’s callable is executed</li> <li><strong>Error Reporting</strong>: Failed conditions display their error messages in the Godot Doctor dock</li> <li><strong>Navigation</strong>: Click on errors in the dock to navigate directly to the problematic nodes</li>",ee,F,Ye="Examples",le,tt,Ze='For detailed examples and common validation patterns, see <a href="./addons/godot_doctor/examples/README.md">the examples README</a>.',oe,E,$e="Installation",se,et,tl="<li>Copy the <code>addons/godot_doctor</code> folder to your project’s <code>addons/</code> directory</li> <li>Enable the plugin in Project Settings &gt; Plugins</li> <li>The Godot Doctor dock will appear in the editor’s left panel</li> <li>Start adding <code>_get_validation_conditions()</code> methods to your scripts, then save your scenes to see validation results!</li>",ie,B,el="License",ae,lt,ll="Godot Doctor is released under the MIT License. See the LICENSE file for details.",ne,L,ol="Attribution",ce,ot,sl="If you end up using Godot Doctor in your project, a line in your credits would be very much appreciated! 🐦",re,T,il="Contributing, Bug Reports & Feature Requests",pe,st,al=`Godot Doctor is open-source and welcomes any contributions!
Feel free to open issues or submit pull requests on <a href="https://github.com/codevogel/godot-doctor/" rel="nofollow">GitHub</a>.`;return{c(){p=a("nav"),p.innerHTML=ue,mt=s(),d=a("h1"),d.textContent=Ce,ft=s(),M=a("p"),M.innerHTML=he,xt=s(),G=a("img"),Dt=s(),u=a("h2"),u.textContent=ye,_t=s(),V=a("ol"),V.innerHTML=me,At=s(),C=a("h2"),C.textContent=fe,bt=s(),q=a("ul"),q.innerHTML=xe,kt=s(),h=a("h2"),h.textContent=De,wt=s(),P=a("p"),P.textContent=_e,gt=s(),v=a("h2"),v.textContent=Ae,Ht=s(),y=a("h3"),y.innerHTML=be,Ft=s(),S=a("p"),S.innerHTML=ke,Et=s(),R=a("p"),R.textContent=we,Bt=s(),j=a("p"),j.innerHTML=ge,Lt=s(),N=a("p"),N.textContent=He,Tt=s(),m=a("h3"),m.textContent=Fe,Mt=s(),I=a("p"),I.textContent=Ee,Gt=s(),W=a("p"),W.innerHTML=Be,Vt=s(),f=a("h3"),f.textContent=Le,qt=s(),z=a("p"),z.innerHTML=Te,Pt=s(),x=a("h3"),x.textContent=Me,St=s(),U=a("p"),U.textContent=Ge,Rt=s(),O=a("ul"),O.innerHTML=Ve,jt=s(),D=a("h3"),D.textContent=qe,Nt=s(),Q=a("p"),Q.innerHTML=Pe,It=s(),_=a("h2"),_.textContent=Se,Wt=s(),A=a("h3"),A.textContent=Re,zt=s(),J=a("p"),J.innerHTML=je,Ut=s(),it=new vt(!1),at=s(),b=a("h3"),b.textContent=Ne,Ot=s(),K=a("p"),K.innerHTML=Ie,Qt=s(),nt=new vt(!1),ct=s(),k=a("h3"),k.textContent=We,Jt=s(),X=a("p"),X.innerHTML=ze,Kt=s(),rt=new vt(!1),pt=s(),w=a("h3"),w.textContent=Ue,Xt=s(),Y=a("p"),Y.textContent=Oe,Yt=s(),dt=new vt(!1),ut=s(),g=a("h3"),g.textContent=Qe,Zt=s(),Z=a("p"),Z.textContent=Je,$t=s(),Ct=new vt(!1),ht=s(),H=a("h2"),H.textContent=Ke,te=s(),$=a("ol"),$.innerHTML=Xe,ee=s(),F=a("h2"),F.textContent=Ye,le=s(),tt=a("p"),tt.innerHTML=Ze,oe=s(),E=a("h2"),E.textContent=$e,se=s(),et=a("ol"),et.innerHTML=tl,ie=s(),B=a("h2"),B.textContent=el,ae=s(),lt=a("p"),lt.textContent=ll,ne=s(),L=a("h3"),L.textContent=ol,ce=s(),ot=a("p"),ot.textContent=sl,re=s(),T=a("h2"),T.textContent=il,pe=s(),st=a("p"),st.innerHTML=al,this.h()},l(t){p=n(t,"NAV",{class:!0,"data-svelte-h":!0}),c(p)!=="svelte-1tmiaf"&&(p.innerHTML=ue),mt=i(t),d=n(t,"H1",{id:!0,"data-svelte-h":!0}),c(d)!=="svelte-1ed5x8c"&&(d.textContent=Ce),ft=i(t),M=n(t,"P",{"data-svelte-h":!0}),c(M)!=="svelte-1945wzi"&&(M.innerHTML=he),xt=i(t),G=n(t,"IMG",{src:!0,width:!0}),Dt=i(t),u=n(t,"H2",{id:!0,"data-svelte-h":!0}),c(u)!=="svelte-v4boi0"&&(u.textContent=ye),_t=i(t),V=n(t,"OL",{"data-svelte-h":!0}),c(V)!=="svelte-uzpxzp"&&(V.innerHTML=me),At=i(t),C=n(t,"H2",{id:!0,"data-svelte-h":!0}),c(C)!=="svelte-ki5nsa"&&(C.textContent=fe),bt=i(t),q=n(t,"UL",{"data-svelte-h":!0}),c(q)!=="svelte-1v8tb0h"&&(q.innerHTML=xe),kt=i(t),h=n(t,"H2",{id:!0,"data-svelte-h":!0}),c(h)!=="svelte-12nroh8"&&(h.textContent=De),wt=i(t),P=n(t,"P",{"data-svelte-h":!0}),c(P)!=="svelte-1xl8232"&&(P.textContent=_e),gt=i(t),v=n(t,"H2",{id:!0,"data-svelte-h":!0}),c(v)!=="svelte-t5h3ii"&&(v.textContent=Ae),Ht=i(t),y=n(t,"H3",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-6shps8"&&(y.innerHTML=be),Ft=i(t),S=n(t,"P",{"data-svelte-h":!0}),c(S)!=="svelte-1wlppov"&&(S.innerHTML=ke),Et=i(t),R=n(t,"P",{"data-svelte-h":!0}),c(R)!=="svelte-1mi1wb7"&&(R.textContent=we),Bt=i(t),j=n(t,"P",{"data-svelte-h":!0}),c(j)!=="svelte-1tavs1s"&&(j.innerHTML=ge),Lt=i(t),N=n(t,"P",{"data-svelte-h":!0}),c(N)!=="svelte-1hykbvb"&&(N.textContent=He),Tt=i(t),m=n(t,"H3",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-o88bmy"&&(m.textContent=Fe),Mt=i(t),I=n(t,"P",{"data-svelte-h":!0}),c(I)!=="svelte-jlp4tj"&&(I.textContent=Ee),Gt=i(t),W=n(t,"P",{"data-svelte-h":!0}),c(W)!=="svelte-elb4xi"&&(W.innerHTML=Be),Vt=i(t),f=n(t,"H3",{id:!0,"data-svelte-h":!0}),c(f)!=="svelte-1k082cy"&&(f.textContent=Le),qt=i(t),z=n(t,"P",{"data-svelte-h":!0}),c(z)!=="svelte-1av7qt5"&&(z.innerHTML=Te),Pt=i(t),x=n(t,"H3",{id:!0,"data-svelte-h":!0}),c(x)!=="svelte-1oua0xo"&&(x.textContent=Me),St=i(t),U=n(t,"P",{"data-svelte-h":!0}),c(U)!=="svelte-1c4s09q"&&(U.textContent=Ge),Rt=i(t),O=n(t,"UL",{"data-svelte-h":!0}),c(O)!=="svelte-1uw046s"&&(O.innerHTML=Ve),jt=i(t),D=n(t,"H3",{id:!0,"data-svelte-h":!0}),c(D)!=="svelte-6jxhu5"&&(D.textContent=qe),Nt=i(t),Q=n(t,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-1mhkmjg"&&(Q.innerHTML=Pe),It=i(t),_=n(t,"H2",{id:!0,"data-svelte-h":!0}),c(_)!=="svelte-a93vh6"&&(_.textContent=Se),Wt=i(t),A=n(t,"H3",{id:!0,"data-svelte-h":!0}),c(A)!=="svelte-125ng98"&&(A.textContent=Re),zt=i(t),J=n(t,"P",{"data-svelte-h":!0}),c(J)!=="svelte-uji624"&&(J.innerHTML=je),Ut=i(t),it=yt(t,!1),at=i(t),b=n(t,"H3",{id:!0,"data-svelte-h":!0}),c(b)!=="svelte-1e7pzoe"&&(b.textContent=Ne),Ot=i(t),K=n(t,"P",{"data-svelte-h":!0}),c(K)!=="svelte-roy90n"&&(K.innerHTML=Ie),Qt=i(t),nt=yt(t,!1),ct=i(t),k=n(t,"H3",{id:!0,"data-svelte-h":!0}),c(k)!=="svelte-1thj3ni"&&(k.textContent=We),Jt=i(t),X=n(t,"P",{"data-svelte-h":!0}),c(X)!=="svelte-htvjnu"&&(X.innerHTML=ze),Kt=i(t),rt=yt(t,!1),pt=i(t),w=n(t,"H3",{id:!0,"data-svelte-h":!0}),c(w)!=="svelte-1nxsr6p"&&(w.textContent=Ue),Xt=i(t),Y=n(t,"P",{"data-svelte-h":!0}),c(Y)!=="svelte-1161j94"&&(Y.textContent=Oe),Yt=i(t),dt=yt(t,!1),ut=i(t),g=n(t,"H3",{id:!0,"data-svelte-h":!0}),c(g)!=="svelte-1g96ec6"&&(g.textContent=Qe),Zt=i(t),Z=n(t,"P",{"data-svelte-h":!0}),c(Z)!=="svelte-bhycgs"&&(Z.textContent=Je),$t=i(t),Ct=yt(t,!1),ht=i(t),H=n(t,"H2",{id:!0,"data-svelte-h":!0}),c(H)!=="svelte-ui2hjs"&&(H.textContent=Ke),te=i(t),$=n(t,"OL",{"data-svelte-h":!0}),c($)!=="svelte-fjqbw8"&&($.innerHTML=Xe),ee=i(t),F=n(t,"H2",{id:!0,"data-svelte-h":!0}),c(F)!=="svelte-1s79ehq"&&(F.textContent=Ye),le=i(t),tt=n(t,"P",{"data-svelte-h":!0}),c(tt)!=="svelte-n1nyto"&&(tt.innerHTML=Ze),oe=i(t),E=n(t,"H2",{id:!0,"data-svelte-h":!0}),c(E)!=="svelte-igr1mm"&&(E.textContent=$e),se=i(t),et=n(t,"OL",{"data-svelte-h":!0}),c(et)!=="svelte-1j3itk9"&&(et.innerHTML=tl),ie=i(t),B=n(t,"H2",{id:!0,"data-svelte-h":!0}),c(B)!=="svelte-1dg97vg"&&(B.textContent=el),ae=i(t),lt=n(t,"P",{"data-svelte-h":!0}),c(lt)!=="svelte-1c4o597"&&(lt.textContent=ll),ne=i(t),L=n(t,"H3",{id:!0,"data-svelte-h":!0}),c(L)!=="svelte-1i7rs2a"&&(L.textContent=ol),ce=i(t),ot=n(t,"P",{"data-svelte-h":!0}),c(ot)!=="svelte-eh2xet"&&(ot.textContent=sl),re=i(t),T=n(t,"H2",{id:!0,"data-svelte-h":!0}),c(T)!=="svelte-1cwtvv1"&&(T.textContent=il),pe=i(t),st=n(t,"P",{"data-svelte-h":!0}),c(st)!=="svelte-y1mujh"&&(st.innerHTML=al),this.h()},h(){r(p,"class","toc"),r(d,"id","godot-doctor-️"),hl(G.src,ve="https://raw.githubusercontent.com/codevogel/godot-doctor/refs/heads/main/github-assets/png/godot-doctor-logo.png")||r(G,"src",ve),r(G,"width","256"),r(u,"id","quickstart-"),r(C,"id","table-of-contents"),r(h,"id","what-is-godot-doctor"),r(v,"id","why-use-godot-doctor"),r(y,"id","️-no-tool-required"),r(m,"id","-automatic-scene-validation"),r(f,"id","️validate-nodes-and-resources"),r(x,"id","-test-driven-validation"),r(D,"id","-declarative-syntax"),r(_,"id","syntax"),r(A,"id","validationcondition"),it.a=at,r(b,"id","simple-helper-method"),nt.a=ct,r(k,"id","reuse-validation-logic-with-callables"),rt.a=pt,r(w,"id","abstract-away-complex-logic"),dt.a=ut,r(g,"id","nested-validation-conditions"),Ct.a=ht,r(H,"id","how-it-works"),r(F,"id","examples"),r(E,"id","installation"),r(B,"id","license"),r(L,"id","attribution"),r(T,"id","contributing-bug-reports--feature-requests")},m(t,e){l(t,p,e),l(t,mt,e),l(t,d,e),l(t,ft,e),l(t,M,e),l(t,xt,e),l(t,G,e),l(t,Dt,e),l(t,u,e),l(t,_t,e),l(t,V,e),l(t,At,e),l(t,C,e),l(t,bt,e),l(t,q,e),l(t,kt,e),l(t,h,e),l(t,wt,e),l(t,P,e),l(t,gt,e),l(t,v,e),l(t,Ht,e),l(t,y,e),l(t,Ft,e),l(t,S,e),l(t,Et,e),l(t,R,e),l(t,Bt,e),l(t,j,e),l(t,Lt,e),l(t,N,e),l(t,Tt,e),l(t,m,e),l(t,Mt,e),l(t,I,e),l(t,Gt,e),l(t,W,e),l(t,Vt,e),l(t,f,e),l(t,qt,e),l(t,z,e),l(t,Pt,e),l(t,x,e),l(t,St,e),l(t,U,e),l(t,Rt,e),l(t,O,e),l(t,jt,e),l(t,D,e),l(t,Nt,e),l(t,Q,e),l(t,It,e),l(t,_,e),l(t,Wt,e),l(t,A,e),l(t,zt,e),l(t,J,e),l(t,Ut,e),it.m(cl,t,e),l(t,at,e),l(t,b,e),l(t,Ot,e),l(t,K,e),l(t,Qt,e),nt.m(rl,t,e),l(t,ct,e),l(t,k,e),l(t,Jt,e),l(t,X,e),l(t,Kt,e),rt.m(pl,t,e),l(t,pt,e),l(t,w,e),l(t,Xt,e),l(t,Y,e),l(t,Yt,e),dt.m(dl,t,e),l(t,ut,e),l(t,g,e),l(t,Zt,e),l(t,Z,e),l(t,$t,e),Ct.m(ul,t,e),l(t,ht,e),l(t,H,e),l(t,te,e),l(t,$,e),l(t,ee,e),l(t,F,e),l(t,le,e),l(t,tt,e),l(t,oe,e),l(t,E,e),l(t,se,e),l(t,et,e),l(t,ie,e),l(t,B,e),l(t,ae,e),l(t,lt,e),l(t,ne,e),l(t,L,e),l(t,ce,e),l(t,ot,e),l(t,re,e),l(t,T,e),l(t,pe,e),l(t,st,e)},p:de,i:de,o:de,d(t){t&&(o(p),o(mt),o(d),o(ft),o(M),o(xt),o(G),o(Dt),o(u),o(_t),o(V),o(At),o(C),o(bt),o(q),o(kt),o(h),o(wt),o(P),o(gt),o(v),o(Ht),o(y),o(Ft),o(S),o(Et),o(R),o(Bt),o(j),o(Lt),o(N),o(Tt),o(m),o(Mt),o(I),o(Gt),o(W),o(Vt),o(f),o(qt),o(z),o(Pt),o(x),o(St),o(U),o(Rt),o(O),o(jt),o(D),o(Nt),o(Q),o(It),o(_),o(Wt),o(A),o(zt),o(J),o(Ut),it.d(),o(at),o(b),o(Ot),o(K),o(Qt),nt.d(),o(ct),o(k),o(Jt),o(X),o(Kt),rt.d(),o(pt),o(w),o(Xt),o(Y),o(Yt),dt.d(),o(ut),o(g),o(Zt),o(Z),o($t),Ct.d(),o(ht),o(H),o(te),o($),o(ee),o(F),o(le),o(tt),o(oe),o(E),o(se),o(et),o(ie),o(B),o(ae),o(lt),o(ne),o(L),o(ce),o(ot),o(re),o(T),o(pe),o(st))}}}const Dl={title:"Godot Doctor",description:"A plugin that helps you validate your scenes in Godot!",date:"2025-10-02",category:"tool",published:!0};class _l extends vl{constructor(p){super(),yl(this,p,null,ml,Cl,{})}}export{_l as default,Dl as metadata};

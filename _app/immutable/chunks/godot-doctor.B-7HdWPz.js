import{s as Al,e as n,a as s,H as it,c as i,l as c,g as a,p as ct,m as r,o as bl,i as l,n as fe,f as o}from"./scheduler.D4vXfk3B.js";import{S as kl,i as wl}from"./index.DBFCcoIS.js";function gl(yl){let p,me='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#godot-doctor-️">Godot Doctor 👨🏻‍⚕️🩺</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#quickstart-">Quickstart 🚀</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#table-of-contents">Table of Contents</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#what-is-godot-doctor">What is Godot Doctor?</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#why-use-godot-doctor">Why Use Godot Doctor?</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#️-no-tool-required">🏷️ No @tool Required</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#verify-type-of-packedscene">Verify type of PackedScene</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#-automatic-scene-validation">🔄 Automatic Scene Validation</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#️validate-nodes-and-resources">⚙️Validate Nodes AND Resources</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#-test-driven-validation">🧪 Test-Driven Validation</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#-declarative-syntax">🎯 Declarative Syntax</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#syntax">Syntax</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#validationcondition">ValidationCondition</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#simple-helper-method">Simple Helper Method</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#reuse-validation-logic-with-callables">Reuse validation logic with Callables</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#abstract-away-complex-logic">Abstract Away Complex Logic</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#nested-validation-conditions">Nested Validation Conditions</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#how-it-works">How It Works</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#examples">Examples</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#installation">Installation</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#license">License</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#attribution">Attribution</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#contributing-bug-reports--feature-requests">Contributing, Bug Reports &amp; Feature Requests</a></li></ol></li></ol>',Dt,d,xe="Godot Doctor 👨🏻‍⚕️🩺",At,G,_e="A powerful validation plugin for Godot that catches errors before they reach runtime. Validate scenes, nodes, and resources using a declarative, test-driven approach. No <code>@tool</code> required!",bt,P,De,kt,u,Ae="Quickstart 🚀",wt,V,be="<li>Copy the <code>addons/godot_doctor</code> folder to your project’s <code>addons/</code> directory</li> <li>Enable the plugin in Project Settings &gt; Plugins</li>",gt,C,ke="Table of Contents",Ht,S,we='<li><a href="#what-is-godot-doctor">What is Godot Doctor?</a></li> <li><a href="#why-use-godot-doctor">Why Use Godot Doctor?</a> <ul><li><a href="#no-tool-required">🏷️ No <code>@tool</code> Required</a></li> <li><a href="#verify-type-of-packedscene">🎬 Verify type of PackedScene</a></li> <li><a href="#automatic-scene-validation">🔄 Automatic Scene Validation</a></li> <li><a href="#%EF%B8%8Fvalidate-nodes-and-resources">⚙️ Validate Nodes AND Resources</a></li> <li><a href="#test-driven-validation">🧪 Test-Driven Validation</a></li> <li><a href="#declarative-syntax">🎯 Declarative Syntax</a></li></ul></li> <li><a href="#syntax">Syntax</a> <ul><li><a href="#validationcondition">ValidationCondition</a></li> <li><a href="#simple-helper-method">Simple Helper Method</a></li> <li><a href="#reuse-validation-logic-with-callables">Reuse validation logic with Callables</a></li> <li><a href="#abstract-away-complex-logic">Abstract Away Complex Logic</a></li> <li><a href="#nested-validation-conditions">Nested Validation Conditions</a></li></ul></li> <li><a href="#how-it-works">How It Works</a></li> <li><a href="#examples">Examples</a></li> <li><a href="#installation">Installation</a></li> <li><a href="#license">License</a> <ul><li><a href="#attribution">Attribution</a></li></ul></li> <li><a href="#contributing-bug-reports--feature-requests">Contributing, Bug Reports &amp; Feature Requests</a></li>',Ft,h,ge="What is Godot Doctor?",Et,q,He="Godot Doctor is a Godot plugin that validates your scenes and nodes using a declarative, test-driven approach. Instead of writing procedural warning code, you define validation conditions using callables that focus on validation logic first, with error messages as metadata.",Bt,y,Fe="Why Use Godot Doctor?",Lt,v,Ee="🏷️ <strong>No <code>@tool</code> Required</strong>",Tt,j,Be=`Unlike <a href="https://docs.godotengine.org/en/4.5/classes/class_node.html#class-node-private-method-get-configuration-warnings" rel="nofollow"><code>_get_configuration_warnings()</code></a>, Godot Doctor works without requiring the <a href="https://docs.godotengine.org/en/4.5/tutorials/plugins/running_code_in_the_editor.html#what-is-tool" rel="nofollow"><code>@tool</code></a> annotation on your scripts.
This means that you no longer have to worry about your gameplay code being muddied by editor-specific logic.`,Mt,R,Le="See the difference for yourself:",Gt,N,Te='<img src="./github_assets/png/before_after.png" alt="Before and After Godot Doctor"/>',Pt,I,Me="Our gameplay code stays much more clean and focused!",Vt,f,Ge="Verify type of PackedScene",St,W,Pe=`Godot has a problem with <code>PackedScene</code> type safety. <a href="https://github.com/godotengine/godot-proposals/issues/782" rel="nofollow">We can not strongly type PackedScenes</a>. This means that you may want to instantiate a scene that represents a <code>Friend</code>, but accidentally assign an <code>Enemy</code> scene instead. Oops!
Godot Doctor can validate the type of a <code>PackedScene</code>, ensuring that the root of the scene that you are instancing is of the expected type (e.g. has a script attached of that type), before you even run the game.`,qt,rt,vl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic">## Example: A validation condition that checks whether the &#96;PackedScene&#96; variable &#96;scene_of_foo_type&#96; is of type &#96;Foo&#96;.</span></span>
<span class="line"><span style="color:#A6ACCDC0">ValidationCondition</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">scene_is_of_type</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">scene_of_foo_type</span><span style="color:#A6ACCD">, </span><span style="color:#A6ACCDC0">Foo</span><span style="color:#A6ACCD">)</span></span></code></pre>`,pt,m,Ve="🔄 Automatic Scene Validation",jt,O,Se=`Validations run automatically when you save scenes, providing immediate feedback during development.
Errors are displayed in a dedicated dock, and you can click on them to navigate directly to the problematic nodes.`,Rt,U,qe='<img src="./github_assets/gif/doctor_example.gif" alt="Godot Doctor Example Gif"/>',Nt,x,je="⚙️Validate Nodes AND Resources",It,z,Re=`Godot Doctor can not only validate nodes in your scene, but <code>Resource</code> scripts can define their own validation conditions as well.
Very useful for validating whether your resources have conflicting data (i.e. a value that is higher than the maximum value), or missing references (i.e. an empty string, or a missing texture).`,Wt,_,Ne="🧪 Test-Driven Validation",Ot,Q,Ie="Godot Doctor encourages you to write validation logic that resembles unit tests rather than write code that returns strings containing warnings. This encourages:",Ut,J,We="<li>Testable validation logic</li> <li>Organized code</li> <li>Better maintainability</li> <li>Human-readable validation conditions</li> <li>Separation of concerns between validation logic and error messages</li>",zt,D,Oe="🎯 Declarative Syntax",Qt,K,Ue="Where <code>_get_configuration_warnings()</code> makes you write code that generates strings, Godot Doctor lets you design your validation logic separately from the error messages, making it easier to read and maintain.",Jt,A,ze="Syntax",Kt,b,Qe="ValidationCondition",Xt,X,Je="The core of Godot Doctor is the <code>ValidationCondition</code> class, which takes a callable and an error message:",Yt,dt,fl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic"># Basic validation condition</span></span>
<span class="line"><span style="color:#91B4D5">var</span><span style="color:#E4F0FB"> condition</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCDC0"> ValidationCondition</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">new</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#91B4D5">    func</span><span style="color:#A6ACCD">(): </span><span style="color:#5DE4C7C0">return</span><span style="color:#E4F0FB"> health</span><span style="color:#91B4D5"> ></span><span style="color:#5DE4C7"> 0</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#5DE4C7">    "Health must be greater than 0"</span></span>
<span class="line"><span style="color:#A6ACCD">)</span></span></code></pre>`,ut,k,Ke="Simple Helper Method",Zt,Y,Xe="For basic boolean validations, use the convenience <code>simple()</code> method, allowing you to skip the <code>func()</code> wrapper:",$t,Ct,ml=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic"># Equivalent to the above, but more concise</span></span>
<span class="line"><span style="color:#91B4D5">var</span><span style="color:#E4F0FB"> condition</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCDC0"> ValidationCondition</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">simple</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#E4F0FB">    health</span><span style="color:#91B4D5"> ></span><span style="color:#5DE4C7"> 0</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#5DE4C7">    "Health must be greater than 0"</span></span>
<span class="line"><span style="color:#A6ACCD">)</span></span></code></pre>`,ht,w,Ye="Reuse validation logic with Callables",te,Z,Ze="Using <code>Callables</code> allows you to reuse common validation methods:",ee,yt,xl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">func</span><span style="color:#ADD7FF"> _is_more_than_zero</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">value</span><span style="color:#A6ACCD">: </span><span style="color:#A6ACCDC0">int</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">-></span><span style="color:#A6ACCDC0"> bool</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#5DE4C7C0">	 return</span><span style="color:#E4F0FB"> value</span><span style="color:#91B4D5"> ></span><span style="color:#5DE4C7"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">var</span><span style="color:#E4F0FB"> condition</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCDC0"> ValidationCondition</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">simple</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#E4F0FBD0">	 _is_more_than_zero</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">health</span><span style="color:#A6ACCD">),</span></span>
<span class="line"><span style="color:#5DE4C7">	 "Health must be greater than 0"</span></span>
<span class="line"><span style="color:#A6ACCD">)</span></span></code></pre>`,vt,g,$e="Abstract Away Complex Logic",le,$,tl="Or abstract away complex logic into separate methods:",oe,ft,_l=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">var</span><span style="color:#E4F0FB"> condition</span><span style="color:#91B4D5"> =</span><span style="color:#A6ACCDC0"> ValidationCondition</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">new</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#E4F0FB">	 complex_validation_logic</span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#5DE4C7">	 "Complex validation failed"</span></span>
<span class="line"><span style="color:#A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">func</span><span style="color:#ADD7FF"> complex_validation_logic</span><span style="color:#A6ACCD">() </span><span style="color:#91B4D5">-></span><span style="color:#A6ACCDC0"> bool</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">	# Complex logic here</span></span></code></pre>`,mt,H,el="Nested Validation Conditions",se,tt,ll="Making use of variatic typing, Validation conditions can return arrays of other validation conditions, allowing you to nest validation logic where needed:",ae,xt,Dl=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#A6ACCDC0">ValidationCondition</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">new</span><span style="color:#A6ACCD">(</span></span>
<span class="line"><span style="color:#91B4D5">			func</span><span style="color:#A6ACCD">() </span><span style="color:#91B4D5">-></span><span style="color:#A6ACCDC0"> Variant</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#5DE4C7C0">				if</span><span style="color:#91B4D5"> not</span><span style="color:#E4F0FBD0"> is_instance_valid</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">my_resource</span><span style="color:#A6ACCD">):</span></span>
<span class="line"><span style="color:#5DE4C7C0">					return</span><span style="color:#5DE4C7"> false</span></span>
<span class="line"><span style="color:#5DE4C7C0">				return</span><span style="color:#E4F0FB"> my_resource</span><span style="color:#A6ACCD">.</span><span style="color:#E4F0FBD0">get_validation_conditions</span><span style="color:#A6ACCD">(),</span></span>
<span class="line"><span style="color:#5DE4C7">			"my_resource must be assigned."</span></span>
<span class="line"><span style="color:#A6ACCD">		)</span></span></code></pre>`,_t,F,ol="How It Works",ne,et,sl="<li><strong>Automatic Discovery</strong>: When you save a scene, Godot Doctor scans all nodes for the <code>_get_validation_conditions()</code> method</li> <li><strong>Instance Creation</strong>: For non-<code>@tool</code> scripts, temporary instances are created to run validation logic</li> <li><strong>Condition Evaluation</strong>: Each validation condition’s callable is executed</li> <li><strong>Error Reporting</strong>: Failed conditions display their error messages in the Godot Doctor dock</li> <li><strong>Navigation</strong>: Click on errors in the dock to navigate directly to the problematic nodes</li>",ie,E,al="Examples",ce,lt,nl='For detailed examples and common validation patterns, see <a href="./addons/godot_doctor/examples/README.md">the examples README</a>.',re,B,il="Installation",pe,ot,cl="<li>Copy the <code>addons/godot_doctor</code> folder to your project’s <code>addons/</code> directory</li> <li>Enable the plugin in Project Settings &gt; Plugins</li> <li>The Godot Doctor dock will appear in the editor’s left panel</li> <li>Start adding <code>_get_validation_conditions()</code> methods to your scripts, then save your scenes to see validation results!</li>",de,L,rl="License",ue,st,pl="Godot Doctor is released under the MIT License. See the LICENSE file for details.",Ce,T,dl="Attribution",he,at,ul="If you end up using Godot Doctor in your project, a line in your credits would be very much appreciated! 🐦",ye,M,Cl="Contributing, Bug Reports & Feature Requests",ve,nt,hl=`Godot Doctor is open-source and welcomes any contributions!
Feel free to open issues or submit pull requests on <a href="https://github.com/codevogel/godot_doctor/" rel="nofollow">GitHub</a>.`;return{c(){p=n("nav"),p.innerHTML=me,Dt=s(),d=n("h1"),d.textContent=xe,At=s(),G=n("p"),G.innerHTML=_e,bt=s(),P=n("img"),kt=s(),u=n("h2"),u.textContent=Ae,wt=s(),V=n("ol"),V.innerHTML=be,gt=s(),C=n("h2"),C.textContent=ke,Ht=s(),S=n("ul"),S.innerHTML=we,Ft=s(),h=n("h2"),h.textContent=ge,Et=s(),q=n("p"),q.textContent=He,Bt=s(),y=n("h2"),y.textContent=Fe,Lt=s(),v=n("h3"),v.innerHTML=Ee,Tt=s(),j=n("p"),j.innerHTML=Be,Mt=s(),R=n("p"),R.textContent=Le,Gt=s(),N=n("p"),N.innerHTML=Te,Pt=s(),I=n("p"),I.textContent=Me,Vt=s(),f=n("h3"),f.textContent=Ge,St=s(),W=n("p"),W.innerHTML=Pe,qt=s(),rt=new it(!1),pt=s(),m=n("h3"),m.textContent=Ve,jt=s(),O=n("p"),O.textContent=Se,Rt=s(),U=n("p"),U.innerHTML=qe,Nt=s(),x=n("h3"),x.textContent=je,It=s(),z=n("p"),z.innerHTML=Re,Wt=s(),_=n("h3"),_.textContent=Ne,Ot=s(),Q=n("p"),Q.textContent=Ie,Ut=s(),J=n("ul"),J.innerHTML=We,zt=s(),D=n("h3"),D.textContent=Oe,Qt=s(),K=n("p"),K.innerHTML=Ue,Jt=s(),A=n("h2"),A.textContent=ze,Kt=s(),b=n("h3"),b.textContent=Qe,Xt=s(),X=n("p"),X.innerHTML=Je,Yt=s(),dt=new it(!1),ut=s(),k=n("h3"),k.textContent=Ke,Zt=s(),Y=n("p"),Y.innerHTML=Xe,$t=s(),Ct=new it(!1),ht=s(),w=n("h3"),w.textContent=Ye,te=s(),Z=n("p"),Z.innerHTML=Ze,ee=s(),yt=new it(!1),vt=s(),g=n("h3"),g.textContent=$e,le=s(),$=n("p"),$.textContent=tl,oe=s(),ft=new it(!1),mt=s(),H=n("h3"),H.textContent=el,se=s(),tt=n("p"),tt.textContent=ll,ae=s(),xt=new it(!1),_t=s(),F=n("h2"),F.textContent=ol,ne=s(),et=n("ol"),et.innerHTML=sl,ie=s(),E=n("h2"),E.textContent=al,ce=s(),lt=n("p"),lt.innerHTML=nl,re=s(),B=n("h2"),B.textContent=il,pe=s(),ot=n("ol"),ot.innerHTML=cl,de=s(),L=n("h2"),L.textContent=rl,ue=s(),st=n("p"),st.textContent=pl,Ce=s(),T=n("h3"),T.textContent=dl,he=s(),at=n("p"),at.textContent=ul,ye=s(),M=n("h2"),M.textContent=Cl,ve=s(),nt=n("p"),nt.innerHTML=hl,this.h()},l(t){p=i(t,"NAV",{class:!0,"data-svelte-h":!0}),c(p)!=="svelte-d7j3ff"&&(p.innerHTML=me),Dt=a(t),d=i(t,"H1",{id:!0,"data-svelte-h":!0}),c(d)!=="svelte-1ed5x8c"&&(d.textContent=xe),At=a(t),G=i(t,"P",{"data-svelte-h":!0}),c(G)!=="svelte-sg6bhc"&&(G.innerHTML=_e),bt=a(t),P=i(t,"IMG",{src:!0,width:!0}),kt=a(t),u=i(t,"H2",{id:!0,"data-svelte-h":!0}),c(u)!=="svelte-v4boi0"&&(u.textContent=Ae),wt=a(t),V=i(t,"OL",{"data-svelte-h":!0}),c(V)!=="svelte-uzpxzp"&&(V.innerHTML=be),gt=a(t),C=i(t,"H2",{id:!0,"data-svelte-h":!0}),c(C)!=="svelte-ki5nsa"&&(C.textContent=ke),Ht=a(t),S=i(t,"UL",{"data-svelte-h":!0}),c(S)!=="svelte-1mutoq4"&&(S.innerHTML=we),Ft=a(t),h=i(t,"H2",{id:!0,"data-svelte-h":!0}),c(h)!=="svelte-12nroh8"&&(h.textContent=ge),Et=a(t),q=i(t,"P",{"data-svelte-h":!0}),c(q)!=="svelte-1xl8232"&&(q.textContent=He),Bt=a(t),y=i(t,"H2",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-t5h3ii"&&(y.textContent=Fe),Lt=a(t),v=i(t,"H3",{id:!0,"data-svelte-h":!0}),c(v)!=="svelte-6shps8"&&(v.innerHTML=Ee),Tt=a(t),j=i(t,"P",{"data-svelte-h":!0}),c(j)!=="svelte-1wlppov"&&(j.innerHTML=Be),Mt=a(t),R=i(t,"P",{"data-svelte-h":!0}),c(R)!=="svelte-1mi1wb7"&&(R.textContent=Le),Gt=a(t),N=i(t,"P",{"data-svelte-h":!0}),c(N)!=="svelte-42qj8"&&(N.innerHTML=Te),Pt=a(t),I=i(t,"P",{"data-svelte-h":!0}),c(I)!=="svelte-1hykbvb"&&(I.textContent=Me),Vt=a(t),f=i(t,"H3",{id:!0,"data-svelte-h":!0}),c(f)!=="svelte-lvs8g3"&&(f.textContent=Ge),St=a(t),W=i(t,"P",{"data-svelte-h":!0}),c(W)!=="svelte-1j79h4p"&&(W.innerHTML=Pe),qt=a(t),rt=ct(t,!1),pt=a(t),m=i(t,"H3",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-o88bmy"&&(m.textContent=Ve),jt=a(t),O=i(t,"P",{"data-svelte-h":!0}),c(O)!=="svelte-jlp4tj"&&(O.textContent=Se),Rt=a(t),U=i(t,"P",{"data-svelte-h":!0}),c(U)!=="svelte-157jyxy"&&(U.innerHTML=qe),Nt=a(t),x=i(t,"H3",{id:!0,"data-svelte-h":!0}),c(x)!=="svelte-1k082cy"&&(x.textContent=je),It=a(t),z=i(t,"P",{"data-svelte-h":!0}),c(z)!=="svelte-1av7qt5"&&(z.innerHTML=Re),Wt=a(t),_=i(t,"H3",{id:!0,"data-svelte-h":!0}),c(_)!=="svelte-1oua0xo"&&(_.textContent=Ne),Ot=a(t),Q=i(t,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-1c4s09q"&&(Q.textContent=Ie),Ut=a(t),J=i(t,"UL",{"data-svelte-h":!0}),c(J)!=="svelte-1uw046s"&&(J.innerHTML=We),zt=a(t),D=i(t,"H3",{id:!0,"data-svelte-h":!0}),c(D)!=="svelte-6jxhu5"&&(D.textContent=Oe),Qt=a(t),K=i(t,"P",{"data-svelte-h":!0}),c(K)!=="svelte-1mhkmjg"&&(K.innerHTML=Ue),Jt=a(t),A=i(t,"H2",{id:!0,"data-svelte-h":!0}),c(A)!=="svelte-a93vh6"&&(A.textContent=ze),Kt=a(t),b=i(t,"H3",{id:!0,"data-svelte-h":!0}),c(b)!=="svelte-125ng98"&&(b.textContent=Qe),Xt=a(t),X=i(t,"P",{"data-svelte-h":!0}),c(X)!=="svelte-uji624"&&(X.innerHTML=Je),Yt=a(t),dt=ct(t,!1),ut=a(t),k=i(t,"H3",{id:!0,"data-svelte-h":!0}),c(k)!=="svelte-1e7pzoe"&&(k.textContent=Ke),Zt=a(t),Y=i(t,"P",{"data-svelte-h":!0}),c(Y)!=="svelte-roy90n"&&(Y.innerHTML=Xe),$t=a(t),Ct=ct(t,!1),ht=a(t),w=i(t,"H3",{id:!0,"data-svelte-h":!0}),c(w)!=="svelte-1thj3ni"&&(w.textContent=Ye),te=a(t),Z=i(t,"P",{"data-svelte-h":!0}),c(Z)!=="svelte-htvjnu"&&(Z.innerHTML=Ze),ee=a(t),yt=ct(t,!1),vt=a(t),g=i(t,"H3",{id:!0,"data-svelte-h":!0}),c(g)!=="svelte-1nxsr6p"&&(g.textContent=$e),le=a(t),$=i(t,"P",{"data-svelte-h":!0}),c($)!=="svelte-1161j94"&&($.textContent=tl),oe=a(t),ft=ct(t,!1),mt=a(t),H=i(t,"H3",{id:!0,"data-svelte-h":!0}),c(H)!=="svelte-1g96ec6"&&(H.textContent=el),se=a(t),tt=i(t,"P",{"data-svelte-h":!0}),c(tt)!=="svelte-bhycgs"&&(tt.textContent=ll),ae=a(t),xt=ct(t,!1),_t=a(t),F=i(t,"H2",{id:!0,"data-svelte-h":!0}),c(F)!=="svelte-ui2hjs"&&(F.textContent=ol),ne=a(t),et=i(t,"OL",{"data-svelte-h":!0}),c(et)!=="svelte-fjqbw8"&&(et.innerHTML=sl),ie=a(t),E=i(t,"H2",{id:!0,"data-svelte-h":!0}),c(E)!=="svelte-1s79ehq"&&(E.textContent=al),ce=a(t),lt=i(t,"P",{"data-svelte-h":!0}),c(lt)!=="svelte-n1nyto"&&(lt.innerHTML=nl),re=a(t),B=i(t,"H2",{id:!0,"data-svelte-h":!0}),c(B)!=="svelte-igr1mm"&&(B.textContent=il),pe=a(t),ot=i(t,"OL",{"data-svelte-h":!0}),c(ot)!=="svelte-1j3itk9"&&(ot.innerHTML=cl),de=a(t),L=i(t,"H2",{id:!0,"data-svelte-h":!0}),c(L)!=="svelte-1dg97vg"&&(L.textContent=rl),ue=a(t),st=i(t,"P",{"data-svelte-h":!0}),c(st)!=="svelte-1c4o597"&&(st.textContent=pl),Ce=a(t),T=i(t,"H3",{id:!0,"data-svelte-h":!0}),c(T)!=="svelte-1i7rs2a"&&(T.textContent=dl),he=a(t),at=i(t,"P",{"data-svelte-h":!0}),c(at)!=="svelte-eh2xet"&&(at.textContent=ul),ye=a(t),M=i(t,"H2",{id:!0,"data-svelte-h":!0}),c(M)!=="svelte-1cwtvv1"&&(M.textContent=Cl),ve=a(t),nt=i(t,"P",{"data-svelte-h":!0}),c(nt)!=="svelte-1l21s4b"&&(nt.innerHTML=hl),this.h()},h(){r(p,"class","toc"),r(d,"id","godot-doctor-️"),bl(P.src,De="https://raw.githubusercontent.com/codevogel/godot_doctor/refs/heads/main/github_assets/png/godot_doctor_logo.png")||r(P,"src",De),r(P,"width","256"),r(u,"id","quickstart-"),r(C,"id","table-of-contents"),r(h,"id","what-is-godot-doctor"),r(y,"id","why-use-godot-doctor"),r(v,"id","️-no-tool-required"),r(f,"id","verify-type-of-packedscene"),rt.a=pt,r(m,"id","-automatic-scene-validation"),r(x,"id","️validate-nodes-and-resources"),r(_,"id","-test-driven-validation"),r(D,"id","-declarative-syntax"),r(A,"id","syntax"),r(b,"id","validationcondition"),dt.a=ut,r(k,"id","simple-helper-method"),Ct.a=ht,r(w,"id","reuse-validation-logic-with-callables"),yt.a=vt,r(g,"id","abstract-away-complex-logic"),ft.a=mt,r(H,"id","nested-validation-conditions"),xt.a=_t,r(F,"id","how-it-works"),r(E,"id","examples"),r(B,"id","installation"),r(L,"id","license"),r(T,"id","attribution"),r(M,"id","contributing-bug-reports--feature-requests")},m(t,e){l(t,p,e),l(t,Dt,e),l(t,d,e),l(t,At,e),l(t,G,e),l(t,bt,e),l(t,P,e),l(t,kt,e),l(t,u,e),l(t,wt,e),l(t,V,e),l(t,gt,e),l(t,C,e),l(t,Ht,e),l(t,S,e),l(t,Ft,e),l(t,h,e),l(t,Et,e),l(t,q,e),l(t,Bt,e),l(t,y,e),l(t,Lt,e),l(t,v,e),l(t,Tt,e),l(t,j,e),l(t,Mt,e),l(t,R,e),l(t,Gt,e),l(t,N,e),l(t,Pt,e),l(t,I,e),l(t,Vt,e),l(t,f,e),l(t,St,e),l(t,W,e),l(t,qt,e),rt.m(vl,t,e),l(t,pt,e),l(t,m,e),l(t,jt,e),l(t,O,e),l(t,Rt,e),l(t,U,e),l(t,Nt,e),l(t,x,e),l(t,It,e),l(t,z,e),l(t,Wt,e),l(t,_,e),l(t,Ot,e),l(t,Q,e),l(t,Ut,e),l(t,J,e),l(t,zt,e),l(t,D,e),l(t,Qt,e),l(t,K,e),l(t,Jt,e),l(t,A,e),l(t,Kt,e),l(t,b,e),l(t,Xt,e),l(t,X,e),l(t,Yt,e),dt.m(fl,t,e),l(t,ut,e),l(t,k,e),l(t,Zt,e),l(t,Y,e),l(t,$t,e),Ct.m(ml,t,e),l(t,ht,e),l(t,w,e),l(t,te,e),l(t,Z,e),l(t,ee,e),yt.m(xl,t,e),l(t,vt,e),l(t,g,e),l(t,le,e),l(t,$,e),l(t,oe,e),ft.m(_l,t,e),l(t,mt,e),l(t,H,e),l(t,se,e),l(t,tt,e),l(t,ae,e),xt.m(Dl,t,e),l(t,_t,e),l(t,F,e),l(t,ne,e),l(t,et,e),l(t,ie,e),l(t,E,e),l(t,ce,e),l(t,lt,e),l(t,re,e),l(t,B,e),l(t,pe,e),l(t,ot,e),l(t,de,e),l(t,L,e),l(t,ue,e),l(t,st,e),l(t,Ce,e),l(t,T,e),l(t,he,e),l(t,at,e),l(t,ye,e),l(t,M,e),l(t,ve,e),l(t,nt,e)},p:fe,i:fe,o:fe,d(t){t&&(o(p),o(Dt),o(d),o(At),o(G),o(bt),o(P),o(kt),o(u),o(wt),o(V),o(gt),o(C),o(Ht),o(S),o(Ft),o(h),o(Et),o(q),o(Bt),o(y),o(Lt),o(v),o(Tt),o(j),o(Mt),o(R),o(Gt),o(N),o(Pt),o(I),o(Vt),o(f),o(St),o(W),o(qt),rt.d(),o(pt),o(m),o(jt),o(O),o(Rt),o(U),o(Nt),o(x),o(It),o(z),o(Wt),o(_),o(Ot),o(Q),o(Ut),o(J),o(zt),o(D),o(Qt),o(K),o(Jt),o(A),o(Kt),o(b),o(Xt),o(X),o(Yt),dt.d(),o(ut),o(k),o(Zt),o(Y),o($t),Ct.d(),o(ht),o(w),o(te),o(Z),o(ee),yt.d(),o(vt),o(g),o(le),o($),o(oe),ft.d(),o(mt),o(H),o(se),o(tt),o(ae),xt.d(),o(_t),o(F),o(ne),o(et),o(ie),o(E),o(ce),o(lt),o(re),o(B),o(pe),o(ot),o(de),o(L),o(ue),o(st),o(Ce),o(T),o(he),o(at),o(ye),o(M),o(ve),o(nt))}}}const El={title:"Godot Doctor",description:"A plugin that helps you validate your scenes in Godot!",date:"2025-10-02",category:"tool",published:!0};class Bl extends kl{constructor(p){super(),wl(this,p,null,gl,Al,{})}}export{Bl as default,El as metadata};
